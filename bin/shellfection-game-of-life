#!/usr/bin/env python
#
# The Game of Life
#
# A fun screensaver simulating life.
#
# phase 1: creation
# phase 2: life
# phase 3: destruction

try:
    from PIL import Image
except:
    from sys import stderr, exit
    stderr.write('[E] PIL not installed')
    exit(1)
import curses, os
import math
from drawille import Canvas
from StringIO import StringIO
import urllib2
from sys import stdout
import locale
import re
from subprocess import check_output
import time
from random import randint
import random
import string

global color_pairs

locale.setlocale(locale.LC_ALL,"")

screen = curses.initscr()
curses.start_color()

curses.noecho()
curses.curs_set(0)
screen.keypad(1)
curses.start_color()
curses.use_default_colors()
screen.nodelay(1)

color_pairs = {"index":1}

class Color:
    def __init__(self):
        self.spreadFactor = randint(0, 20)
        self.symbol = random.choice(string.ascii_letters + string.digits + string.punctuation)
        fgColor = randint(0, 255)
        bgColor = randint(0, 255)
        curses.init_pair(color_pairs["index"], fgColor, bgColor)
        self.color_pair = color_pairs["index"]
        color_pairs["index"] += 1

    def render(self, x, y):
        screen.addstr(y, x, self.symbol, curses.color_pair(self.color_pair))

old_timestamp = int(time.time())
phase = randint(1, 3)
phase_length = randint(0, 30)
colors = [[None] * 2500 for n in range(2500)]

while True:
    event = screen.getch()
    if event and event != -1 and event != curses.KEY_RESIZE:
        screen.clear()
        screen.refresh()
        break
    timestamp = int(time.time())
    max_y, max_x = screen.getmaxyx()
    for row_index in range(0, max_y - 1):
        row = colors[row_index]
        for color_index in range(0, max_x - 1):
            if row[color_index]:
                row[color_index].render(color_index, row_index)
                spread = int((randint(1, 5) * row[color_index].spreadFactor) / 20.0)
                direction = randint(1, 4)
                for i in range(0, spread):
                    if direction == 1 and row_index-1 >= 0:
                        colors[row_index-1][color_index] = row[color_index]
                        colors[row_index-1][color_index].render(color_index, row_index-1)
                    elif direction == 2 and row_index+1 < max_y:
                        colors[row_index+1][color_index] = row[color_index]
                        colors[row_index+1][color_index].render(color_index, row_index+1)
                    elif direction == 3 and color_index-1 >= 0:
                        colors[row_index][color_index-1] = row[color_index]
                        colors[row_index][color_index-1].render(color_index-1, row_index)
                    elif direction == 4 and color_index+1 < max_x:
                        colors[row_index][color_index+1] = row[color_index]
                        colors[row_index][color_index+1].render(color_index+1, row_index)
            else:
                if randint(1, 100) == 1:
                    row[color_index] = Color()
                    row[color_index].render(color_index, row_index)
    screen.refresh()
